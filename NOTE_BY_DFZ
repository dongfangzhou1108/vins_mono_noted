feature_tracker_node:
	光流跟踪，发布跟踪帧时间、归一化平面点坐标、速度和像素；
	核心处理函数：void FeatureTracker::readImage(const cv::Mat &_img, double _cur_time)；
		使用函数：cv::calcOpticalFlowPyrLK()跟踪光流；
		如果发布当前帧：首先使用cv::findFundamentalMat()基于基础矩阵，筛选跟踪光流；
			基于跟踪次数，使用setMask()函数筛选光流，使之分布均匀；
			如果跟踪光流数量不满足数量要求，使用cv::goodFeaturesToTrack()函数提取新特征点等待跟踪；

IMU预计分：
	入口：estimator.processIMU()：
		关键变量：estimator.pre_integrations：拥有滑动窗口大小数量的IntegrationBase数组；
			estimator.tmp_pre_integration：进行feature处理函数processImage()时，缓存相关数据后删除更新；
			IntegrationBase：通过初始加速度、角速度及其bias初始化，每个该对象能够缓存一对图像帧间的IMU测量；
			
estimator_node：
	imu_callback()回调函数：缓存IMU数据，在初始化完成后，基于IMU数据中值积分发布位姿；
	feature_callback()回调函数：缓存光流跟踪点；
	主线程：
		getMeasurements()：提取跟踪光流和IMU数据对，每一对数据；
		processIMU()：
			根据IMU和光流数据时间，计算预计分量和雅各比矩阵；
		processImage()：
			构建ImageFrame类存储预计分量和光流跟踪；
			如果不提供外参标定值：使用CalibrationExRotation()函数标定旋转外参，帧数和标定值方差满足要求时，完成标定；
			初始化：当提供旋转外参且运动时间满足要求时，使用initialStructure()函数；
				通过计算IMU预计分方差是否满足要求，判断传感器运动是否充分；
				构建vector<SFMFeature>，每个SFMFeature由帧数和不同id的光流构成；
				判断视差是否满足初始化计算条件，使用函数relativePose()求解与最后一帧视差较大的一帧，并计算其相对位姿；
				纯视觉SFM：
					PnP策略：使用已三角化的点，和在第i帧首次观察的光流跟踪进行PnP计算，解得第i帧初始位姿；
					三角化策略：
						三角化后半部分：首先三角化l帧和末帧的跟踪光流，然后，根据PnP计算的位姿，三角化 l+1帧到末帧 和末帧间的 共视光流；
							此后，三角化　l+1帧到末帧 和l帧间的 共视光流；
						三角化前半部分：基于PnP算法，根据三角化结果，计算　1到l-1　帧的初始位姿，三角化 首帧到　l帧间的　共视光流；
							最后，基于计算的位姿，三角化其余共视光流；
					构建BA问题，最小化重投影误差，将相机位姿和各个id的三维坐标点作为优化量计算；
					最后根据SFM结果，使用PnP算法计算缓存的所有图像位姿用于初始化；
				初始化开始：
					初始化入口：visualInitialAlign() -> VisualIMUAlignment()；
						solveGyroscopeBias()：用线性方法计算bg;
						LinearAlignment()：用线性方法计算速度、尺度、参考帧重力；
						RefineGravity()：迭代四次修正重力；
					update data:
						update pose(rotation、trans) in the sliding window；
						所有逆深度置为-1；
						使用函数triangulate()基于计算出的无尺度t，三角化滑动窗口feature，得到滑动窗口feature深度；
						scaled p v and feature depth;
						通过计算gravity方向，调整p滑动窗口pvq测量到世界坐标系；
				最后，进行非线性优化；
			非线性优化：
				入口：solveOdometry()：首先三角化新的feature，然后进入函数optimization()；
						optimization()：优化p,v,q,ba,bg,逆深度,外参：
							首先构造ceres问题，然后通过函数vector2double()将Eigen数据转换成double数组；
							分别包括：MarginalizationFactor，IMUFactor，ProjectionFactor三类参差；
							*****仍未解决，非线性优化后，使用函数double2vector():VINS可观性->rot_diff；*****
							*****不使用FEJ算法：因为迭代变化量很小，不影响使用；*****
								边缘化：
									通过IMUFactor/ProjectionFactor构造ResidualBlockInfo，使用函数ResidualBlockInfo->Evaluate计算残差+雅各比；
									marginalization_info->preMarginalize()：calc Jacobian (factor -> Evaluate) 
																			and copy marg parameter_blocks to parameter_block_data;
									marginalization_info->marginalize()：pthread_create(ThreadsConstructA)构造海森矩阵；
									MARGIN_OLD：
										边缘化 para_Pose[0], para_SpeedBias[0] + feature in frame 0;
